extends KinematicBody2D



const charactername = "TOTEM MONSTER"
const character_id = 3



const SPEED = 75
const JUMP_POWER = - 230
const DOUBLE_JUMP_POWER = - 200
const FALL_SPEED = 11
const FLOOR = Vector2(0, - 1)
const DASHSPEED = 300
const PERSONALJUMPSQUATFRAMES = 6
const MAXHP = 130
const MAXSTUN = 48
const MAXMETER = 80
const PARRYPRECISION = 6
const HBOX_THICKNESS = 14



const AI_CHILD = preload("res://2_Scenes/Systems/Player_Systems/AI_Opponent_Controller.tscn")



const TP_EXPL = preload("res://2_Scenes/Entities/Projectiles and Particles/EXPL_Teleport.tscn")
const BLACKHOLE = preload("res://2_Scenes/Entities/Projectiles and Particles/BlackHole.tscn")
const TEAR = preload("res://2_Scenes/Entities/Projectiles and Particles/PROJ_AcidTeardrop.tscn")
const FLASH = preload("res://2_Scenes/Entities/Projectiles and Particles/TPFlash_VISUAL.tscn")
const LANDINGAREA = preload("res://2_Scenes/Entities/Projectiles and Particles/HIT_landing_Area.tscn")
const DJVIS = preload("res://2_Scenes/Entities/Projectiles and Particles/DJ_VISUAL.tscn")

const HITVIS_SMALL = preload("res://2_Scenes/Entities/Projectiles and Particles/Hitsmall_VISUAL.tscn")
const HITVIS_MID = preload("res://2_Scenes/Entities/Projectiles and Particles/Hitmid_VISUAL.tscn")
const BITEVIS = preload("res://2_Scenes/Entities/Projectiles and Particles/Bite_VISUAL.tscn")
const SHIELDCRACK = preload("res://2_Scenes/Entities/Projectiles and Particles/Shieldcrack_VISUAL.tscn")
const SHIELDBREAKPARTICLES = preload("res://2_Scenes/Entities/Projectiles and Particles/Shieldbreak_VISUAL.tscn")
const PARRYPARTICLE = preload("res://2_Scenes/Entities/Projectiles and Particles/Parry_PARTICLE.tscn")
const BLOCKVISUAL_MID = preload("res://2_Scenes/Entities/Projectiles and Particles/Blockvisual_Mid.tscn")
const BLOCKVISUAL_BIG = preload("res://2_Scenes/Entities/Projectiles and Particles/Blockvisual_Big.tscn")

const DUST1 = preload("res://2_Scenes/Entities/Projectiles and Particles/Dust_VISUAL.tscn")
const DUST2 = preload("res://2_Scenes/Entities/Projectiles and Particles/Dust2_VISUAL.tscn")
const FIRESPAWN = preload("res://2_Scenes/Entities/Projectiles and Particles/Firespawn_PARTICLE.tscn")
const SUPERFLASH = preload("res://2_Scenes/Entities/Projectiles and Particles/SuperSummon_VISUAL.tscn")

const SDWALL_PARTICLE = preload("res://2_Scenes/Entities/Projectiles and Particles/Hitstaba_VISUAL.tscn")
const FLOATBODY = preload("res://2_Scenes/Entities/Projectiles and Particles/Floating_body.tscn")
const KOVIS = preload("res://2_Scenes/Entities/Projectiles and Particles/KO_VISUAL.tscn")



var velocity = Vector2()



export  var player = 1
export  var tagcolor = 1
export  var trainingmode = false



var alive = true
var gameover = false
var cpu = false



var introframes = 120
export  var dir = 1
var momentumdir = 1
var screenside = 0
var on_ground = false
var crouching = false
var fullcrouching = false
var dashing = false
var jumpsquatting = false
var jumpsquatframes = 0
var attacking = false
var airattacking = false
var attacknr = 0
var lastairattack = 0
var attackframe = 0
var landinglag = 0
var inotherplayer = false
var i_o_p_frames = 0
var cornered = false

var parrying = false
var doingparry = false
var parryframes = 0
var framesuntilnextparry = 0
var attblocking = false
var blocking = false
var hitstun = 0
var superarmor = 0
var blockstun = 0
var hitwhite = 0
var shieldvis = 0
var static_combo_damage_reduction = 0
var safeonshieldcolor = 0
var tumbling = false
var jugglecounter = 0
var shieldstunned = false
var shocked = false
var hp = MAXHP
var shieldstun = 0
var shieldstunremoveframes = 20
var peppermeter = 0

var doublejumps = 1
var candoublejump = 2

var full_invincibility = false
var earial_invincibility = false
var projectile_invincibility = false


var lpress = false
var rpress = false
var upress = false
var dpress = false
var attackpress = false
var lpressfordash = 0
var rpressfordash = 0
var attackframebuffer = 0
var dashframebuffer = 0


var tapjump = true
var manualdash = true


var framedisadvantage = 0


var o_xloc = 0
var o_yloc = 0
var o_framedisadvantage = 0
var o_og = false
var o_af = 0
var o_dir = 1
var o_p_cornered = false


var cpu_level = 1
var cpu_randomness = 0
var aware_of_projectiles = 0
var cpu_att_atk = false
var want_to_antiair = false
var want_to_p_defend = false
var in_boxing_range = false
var want_to_zone = false
var want_to_crouch = false
var cpu_dpress = false
var cpu_dpress_and_rls = false
var fireballreactrange = 0
var r_gameplan = 0

var truejuggledamage = 0

func _ready():
	$HITboxes / Shield.play("shield")
	$Spritedetails / Spinningstars.play("default")
	$UI / Flippable_UI / Superpoints / FullSuperbar.play("default")
	randomize()
	if GlobalSettings.global_cinematicmode == true:
		$UI.visible = false
		$Tag.visible = false

func setreadyvariables():
	if player == 1:
		if cpu == false:
			$UI / Repositionable_UI / Playername.set_text(str(GlobalSettings.p1altname) + " - " + str(charactername))
		else:
			$UI / Repositionable_UI / Playername.set_text("Comp 1 - " + str(charactername))
	elif player == 2:
		if cpu == false:
			$UI / Repositionable_UI / Playername.set_text(str(GlobalSettings.p2altname) + " - " + str(charactername))
		else:
			$UI / Repositionable_UI / Playername.set_text("Comp 2 - " + str(charactername))
	
	if player == 1:
		$Tag.modulate = Color(1, 0.3, 0.3)
	elif player == 2:
		$Tag.modulate = Color(0.3, 0.3, 1)

func _physics_process(_delta):
	velocity = move_and_slide(velocity, FLOOR)
	
	
	$UI / Repositionable_UI / Debug_Ui / Var1.set_text("Maxst-shst  =" + str(MAXSTUN - shieldstun))
	$TestLabel.set_text(str(aware_of_projectiles))
	
	
	$Tag / TagName.set_text("P" + str(player))
	
	
	if position.x < 160:
		screenside = - 1
	elif position.x >= 160:
		screenside = 1
	if position.x > 460 or position.x < - 140:
		cornered = true
	else:
		cornered = false
	
	
	if is_on_floor() or attacking == true:
		on_ground = true
	else:
		on_ground = false
	
	
	
	if dir == 1:
		$AnimatedSprite.flip_h = false
		$Spritedetails / HitAnimation.flip_h = false
		$HITboxes.scale.x = 1
	elif dir == - 1:
		$AnimatedSprite.flip_h = true
		$Spritedetails / HitAnimation.flip_h = true
		$HITboxes.scale.x = - 1
	
	
	
	if hp <= 0 and trainingmode == false:
		if alive == true:
			Floating_Body()
			KOVis()
			get_node("../fgc_camera").ko_activ()
			get_node("../fgc_camera").shake()
			$Spritedetails / Shadow.global_position.y = 154
		else:
			position.y = - 100
		alive = false
		velocity.x = 0
		velocity.y = 0
		$AnimatedSprite.visible = false
		$Tag.visible = false
		$Spritedetails / Dustparticle.emitting = false
	$UI / Flippable_UI / Healthpoints.value = hp
	if $UI / Flippable_UI / Slow_Healthpoints.value > hp:
		$UI / Flippable_UI / Slow_Healthpoints.value -= 1
	if $UI / Flippable_UI / Slow_Healthpoints.value < hp:
		$UI / Flippable_UI / Slow_Healthpoints.value = hp
	
	
	
	if hitwhite > 0:
		hitwhite -= 1
	
	$AnimatedSprite.modulate = Color(1 + hitwhite, 1 + hitwhite, 1 + hitwhite)
	$Spritedetails / HitAnimation.modulate = Color(1 + hitwhite, 1 + hitwhite, 1 + hitwhite)
	
	
	
	if player == 2:
		var otherplayer = get_tree().get_nodes_in_group("firstplayer")[0]
		o_xloc = otherplayer.global_position.x
		o_yloc = otherplayer.global_position.y
		o_og = otherplayer.on_ground
		o_p_cornered = otherplayer.cornered
		o_dir = otherplayer.dir
		$UI / Flippable_UI.scale.x = - 1
		$UI / Repositionable_UI.position.x = 160
		$UI / Repositionable_UI / Playername.align = Label.ALIGN_RIGHT
		$UI / Repositionable_UI / DT.position.x = 126
		set_collision_mask(3)
	if player == 1:
		var otherplayer = get_tree().get_nodes_in_group("secondplayer")[0]
		o_xloc = otherplayer.global_position.x
		o_yloc = otherplayer.global_position.y
		o_og = otherplayer.on_ground
		o_p_cornered = otherplayer.cornered
		o_dir = otherplayer.dir
		set_collision_mask(2)
	
	
	
	if trainingmode == true:
		$UI / Repositionable_UI / JuggleText2.set_text(str(truejuggledamage))
		$UI / Repositionable_UI / JuggleText.visible = true
		$UI / Repositionable_UI / JuggleText2.visible = true
	
	
	
	if doingparry == true or attacknr == 6 or attacknr == 99 or shieldstunned == true:
		$Spritedetails / Blackbg.visible = true
	else:
		$Spritedetails / Blackbg.visible = false
	
	if dashing == true or attacknr == 8:
		$Spritedetails / TP_Particles.emitting = true
	else:
		$Spritedetails / TP_Particles.emitting = false
	
	
	
	if introframes > 0:
		$AnimatedSprite.play("intro" + str(tagcolor))
		introframes -= 1
		hitwhite = 0
	else:
		introframes = 0
	
	if alive == true and introframes <= 0:
		
		if position.x > o_xloc and on_ground == true and attacking == false and dashing == false and crouching == false:
			dir = - 1
		elif position.x < o_xloc and on_ground == true and attacking == false and dashing == false and crouching == false:
			dir = 1
		
		
		
		if ((Input.is_action_pressed("down_p" + str(player)) and cpu == false) or cpu == true and (cpu_dpress == true or want_to_crouch == true)) and on_ground == true and upress == false and attacking == false and landinglag <= 0 and hitstun == 0 and shieldstunned == false and dashing == false:
			crouching = true
			dashing = false
			parryframes = 0
			if blockstun == 0:
				if fullcrouching == true:
					$AnimatedSprite.play("crouching" + str(tagcolor))
				else:
					$AnimatedSprite.play("crouch" + str(tagcolor))
		else:
			if attacking == false and blockstun == 0:
				crouching = false
				fullcrouching = false
		
		if crouching == false:
			$HURTboxes / HURTbox / CollisionShape2D.position.y = 0
		else:
			$HURTboxes / HURTbox / CollisionShape2D.position.y = 10
		if doingparry == false:
			if crouching == true and attacking == false and dir != o_dir:
				blocking = true
				$Spritedetails / HitAnimation.play("block" + str(tagcolor))
			else:
				blocking = false
				$Spritedetails / HitAnimation.play("hit" + str(tagcolor))
			if attacknr == 6:
				$Spritedetails / HitAnimation.play("superstartup" + str(tagcolor))
		else:
			blocking = false
			$Spritedetails / HitAnimation.play("parry")
		if (Input.is_action_just_released("down_p" + str(player)) and cpu == false) and attacking == false and on_ground == true and blocking == false and hitstun == 0 and jumpsquatting == false and framesuntilnextparry == 0 and shieldstunned == false and dashing == false:
			parryframes = PARRYPRECISION
			parrying = true
			framesuntilnextparry = 30
		if parryframes > 0:
			if lpress == true or rpress == true:
				parryframes -= 2
			else:
				parryframes -= 1
		else:
			parrying = false
			doingparry = false
			parryframes = 0
		if framesuntilnextparry > 0:
			framesuntilnextparry -= 1
		
		
		
		if ((Input.is_action_pressed("left_p" + str(player)) and cpu == false) or cpu == true and $AI_Opponent_Controller.walk_l == true) and crouching == false and on_ground == true and dashing == false and attacking == false and landinglag <= 0 and rpress == false and jumpsquatting == false and hitstun == 0 and blockstun == 0 and shieldstunned == false:
			velocity.x = - SPEED
			if jumpsquatting == false:
				if dir == 1:
					$AnimatedSprite.play("walkback" + str(tagcolor))
				elif dir == - 1:
					$AnimatedSprite.play("walk" + str(tagcolor))
		elif ((Input.is_action_pressed("right_p" + str(player)) and cpu == false) or cpu == true and $AI_Opponent_Controller.walk_r == true) and crouching == false and on_ground == true and dashing == false and attacking == false and landinglag <= 0 and lpress == false and jumpsquatting == false and hitstun == 0 and blockstun == 0 and shieldstunned == false:
			velocity.x = SPEED
			if jumpsquatting == false:
				if dir == 1:
					$AnimatedSprite.play("walk" + str(tagcolor))
				elif dir == - 1:
					$AnimatedSprite.play("walkback" + str(tagcolor))
		else:
			if on_ground == true:
				doublejumps = 1
				if crouching == false and dashing == false and jumpsquatting == false and attacking == false and landinglag <= 0 and hitstun == 0 and blockstun == 0 and shieldstunned == false:
					$AnimatedSprite.play("idle" + str(tagcolor))
				if hitstun == 0 and inotherplayer == false:
					if dashing == false and attacknr != 5:
						velocity.x = lerp(velocity.x, 0, 0.4)
					else:
						velocity.x = lerp(velocity.x, 0, 0.1)
				else:
					if on_ground == true and inotherplayer == false:
						velocity.x = lerp(velocity.x, 0, 0.1)
				tumbling = false
			if velocity.x < 0.2 and velocity.x > - 0.2:
				velocity.x = 0
		if dashing == false:
			$HURTboxes / HURTbox / CollisionShape2D.set_deferred("disabled", false)
		
		if (((Input.is_action_pressed("up_p" + str(player)) and cpu == false) and tapjump == true) or (Input.is_action_pressed("jump_p" + str(player)) and cpu == false)) and on_ground == true and jumpsquatframes == 0 and attacking == false and landinglag <= 0 and hitstun == 0 and blockstun == 0 and shieldstunned == false and dashing == false:
			jumpsquatting = true
			$AnimatedSprite.play("jumpsquat" + str(tagcolor))
			parryframes = 0
		if jumpsquatting == true:
			jumpsquatframes += 1
			crouching = false
			fullcrouching = false
		if jumpsquatframes >= PERSONALJUMPSQUATFRAMES and attacking == false:
			jump()
		
		
		
		if ((Input.is_action_pressed("up_p" + str(player)) and tapjump == true) or Input.is_action_pressed("jump_p" + str(player))) and cpu == false and doublejumps == 1 and on_ground == false and hitstun == 0 and attacknr != 8 and $Framebuffer.djbuffer >= 1 and candoublejump == 0:
			attackframebuffer = 0
			attacknr = 0
			attackframe = 0
			landinglag = 0
			
			if lpress == true and rpress == false:
				velocity.x = - SPEED * 1.25
			elif lpress == false and rpress == true:
				velocity.x = SPEED * 1.25
			else:
				velocity.x = 0
			velocity.y = DOUBLE_JUMP_POWER
			doublejumps = 0
			airattacking = false
			
			$AnimatedSprite.play("jump" + str(tagcolor))
			$Sounds / Jump.play()
			DJvisual()
		if candoublejump > 0:
			candoublejump -= 1
		
		if attacknr != 8:
			velocity.y += FALL_SPEED
		
		
		
		if attacking == true or airattacking == true:
			attackframe += 1
		else:
			attackframe = 0
			attacknr = 0
		
		attackframebuffer = $Framebuffer.attackframebuffer
		
		if (Input.is_action_pressed("attack_p" + str(player)) and cpu == false) and attackframebuffer != 0 and attacking == false and airattacking == false and attackframe == 0 and hitstun == 0 and blockstun == 0 and shieldstunned == false and gameover == false:
			if on_ground == true and landinglag <= 0:
				if dashing == true:
					pass
				elif $Framebuffer.dpress == false and $Framebuffer.upress == false:
					attack()
				elif $Framebuffer.dpress == true and $Framebuffer.upress == false and dashing == false:
					if ($Framebuffer.lpress == true and dir == - 1) or ($Framebuffer.rpress == true and dir == 1):
						forwardcrouchattack()
					else:
						crouchattack()
				elif $Framebuffer.upress == true and $Framebuffer.dpress == false and dashing == false:
					upattack()
		if (Input.is_action_just_pressed("attack_p" + str(player)) and cpu == false) and attackframebuffer == 0 and attacking == false and airattacking == false and attackframe == 0 and hitstun == 0 and shieldstunned == false and gameover == false:
			if on_ground == false:
				if dpress == true and upress == false:
					downairattack()
				else:
					airattack()
		
		
		
		if (Input.is_action_just_pressed("taunt_p" + str(player)) and cpu == false) and attacking == false and airattacking == false and (dashing == false or upress == true) and attackframe == 0 and hitstun == 0 and blockstun == 0 and shieldstunned == false and landinglag <= 0:
			if on_ground == true:
				taunt()
		
		
		
		if cpu == true and attacking == false and airattacking == false and attackframe == 0 and hitstun == 0 and blockstun == 0 and shieldstunned == false and dashing == false and gameover == false:
			if on_ground == true and landinglag == 0 and cpu_level == 1:
				if cpu_randomness == 1:
					if peppermeter >= MAXMETER:
						superattack()
					else:
						attack()
				elif cpu_randomness == 2:
					crouchattack()
				elif cpu_randomness == 3:
					forwardcrouchattack()
				elif cpu_randomness == 4:
					upattack()
				if cpu_randomness >= 5 and cpu_randomness <= 8:
					want_to_crouch = true
				else:
					want_to_crouch = false
			elif on_ground == true and landinglag == 0 and cpu_level == 2:
				if want_to_antiair == true:
					if cpu_randomness >= 1 and cpu_randomness <= 5:
						if r_gameplan != 3:
							upattack()
						else:
							if dir == - 1:
								leftdash()
							elif dir == 1:
								rightdash()
					elif cpu_randomness >= 6 and cpu_randomness <= 7 and dashing == false:
						if r_gameplan != 3:
							if dir == 1:
								leftdash()
								r_cpu_r_t()
							elif dir == - 1:
								rightdash()
								r_cpu_r_t()
						else:
							crouchattack()
					elif cpu_randomness == 8:
						attack()
				if want_to_p_defend == true and want_to_antiair == false:
					if fireballreactrange >= 3:
						if cpu_randomness == 1 and on_ground == true:
							parrying = true
						else:
							parrying = false
						if cpu_randomness >= 2 and cpu_randomness <= 6:
							cpu_dpress = true
						elif cpu_randomness == 7:
							cpu_dpress = false
							if attacking == false:
								jump()
							velocity.x = SPEED * dir
						else:
							cpu_dpress = false
					elif fireballreactrange >= 1 and fireballreactrange < 3:
						if cpu_randomness >= 1 and cpu_randomness <= 5:
							cpu_dpress = true
						elif cpu_randomness == 6:
							cpu_dpress = false
							if attacking == false and blocking == false:
								jump()
						else:
							cpu_dpress = false
					elif fireballreactrange < 1:
						if cpu_randomness >= 1 and cpu_randomness <= 7:
							cpu_dpress = true
						elif cpu_randomness == 8 and on_ground == true:
							parrying = true
						else:
							cpu_dpress = false
				else:
					cpu_dpress = false
					parrying = false
				if want_to_zone == true and want_to_p_defend == false and want_to_antiair == false and in_boxing_range == false:
					if cpu_randomness >= 1 and cpu_randomness <= 3:
						attack()
					elif cpu_randomness == 4:
						upattack()
					elif cpu_randomness == 5:
						if peppermeter >= MAXMETER:
							superattack()
						else:
							forwardcrouchattack()
					else:
						pass
				if in_boxing_range == true and want_to_antiair == false:
					if cpu_randomness >= 1 and cpu_randomness <= 2:
						crouchattack()
						want_to_crouch = false
					elif cpu_randomness >= 3 and cpu_randomness <= 4:
						forwardcrouchattack()
						want_to_crouch = false
					elif cpu_randomness == 5:
						attack()
						want_to_crouch = false
					elif cpu_randomness >= 6 and cpu_randomness <= 8:
						want_to_crouch = true
				else:
					want_to_crouch = false
				if r_gameplan == 1 and want_to_antiair == false and want_to_p_defend == false:
					if cpu_randomness >= 1 and cpu_randomness <= 2:
						upattack()
					elif cpu_randomness == 3:
						attack()
			if on_ground == false:
				cpu_dpress = false
				attacking = false
				parrying = false
				if velocity.y > 40:
					if cpu_randomness >= 1 and cpu_randomness <= 6:
						airattack()
		
		
		
		if on_ground == false:
			dashing = false
			if velocity.y >= 0:
				if airattacking == false:
					$AnimatedSprite.play("fall" + str(tagcolor))
			else:
				if airattacking == false:
					$AnimatedSprite.play("jump" + str(tagcolor))
		elif on_ground == true:
			airattacking = false
			
		if landinglag > 0 and on_ground == true:
			landinglag -= 1
			if lastairattack == 1:
				$AnimatedSprite.play("landinglag" + str(tagcolor))
			elif lastairattack == 2:
				$AnimatedSprite.play("landinglagtotem" + str(tagcolor))
		
		
		
		if on_ground == false or jumpsquatting == true or inotherplayer == true:
			$Otherplayer_OWcollisions / OWcollisioncontainter / OWC_right.set_deferred("disabled", true)
			$Otherplayer_OWcollisions / OWcollisioncontainter / OWC_left.set_deferred("disabled", true)
		else:
			$Otherplayer_OWcollisions / OWcollisioncontainter / OWC_right.set_deferred("disabled", false)
			$Otherplayer_OWcollisions / OWcollisioncontainter / OWC_left.set_deferred("disabled", false)
		
		if dashing == false:
			if o_xloc + HBOX_THICKNESS >= position.x and o_xloc - HBOX_THICKNESS <= position.x and on_ground == true and jumpsquatting == false and o_og == true:
				inotherplayer = true
			else:
				inotherplayer = false
			if inotherplayer == true and i_o_p_frames <= 2:
				i_o_p_frames += 1
				if dir == 1:
					position.x -= (HBOX_THICKNESS + position.x - o_xloc) + 1 * dir
				elif dir == - 1:
					position.x += (HBOX_THICKNESS - position.x + o_xloc) + 1 * dir
				if cornered == true and screenside == - dir and hitstun == 0:
					position.x += - 7 * screenside
			else:
				i_o_p_frames = 0
			if i_o_p_frames >= 4:
				position.x += (6 + player) * dir
			if position.x > 480:
				position.x = 480 - HBOX_THICKNESS
			if position.x < - 160:
				position.x = - 160 + HBOX_THICKNESS
			if position.x < o_xloc and inotherplayer == true:
				position.x -= 4
			if position.x >= o_xloc and inotherplayer == true:
				position.x += 4
		
		
		
		if (Input.is_action_pressed("left_p" + str(player)) and cpu == false):
			lpress = true
		else:
			lpress = false
		if (Input.is_action_pressed("right_p" + str(player)) and cpu == false):
			rpress = true
		else:
			rpress = false
		if (Input.is_action_pressed("up_p" + str(player)) and cpu == false):
			upress = true
		else:
			upress = false
		if (Input.is_action_pressed("down_p" + str(player)) and cpu == false):
			dpress = true
		else:
			dpress = false
		
		
		
		if (Input.is_action_just_pressed("left_p" + str(player)) and cpu == false) and on_ground == true and lpressfordash < 20 and dpress == false and shieldstunned == false:
			lpressfordash += 20
			rpressfordash = 0
		if lpressfordash >= 1:
			lpressfordash -= 1
		if lpressfordash > 21 and attacking == false and jumpsquatting == false and landinglag <= 0 and dashing == false and manualdash == true and hitstun == 0 and blockstun == 0:
			leftdash()
		if (Input.is_action_just_pressed("right_p" + str(player)) and cpu == false) and on_ground == true and rpressfordash < 20 and dpress == false and shieldstunned == false:
			rpressfordash += 20
			lpressfordash = 0
		if rpressfordash >= 1:
			rpressfordash -= 1
		if rpressfordash > 21 and attacking == false and jumpsquatting == false and landinglag <= 0 and dashing == false and manualdash == true and hitstun == 0 and blockstun == 0:
			rightdash()
		
		if (Input.is_action_just_pressed("instantdash_p" + str(player)) and cpu == false) and on_ground == true and dpress == false and hitstun == 0 and blockstun == 0 and shieldstunned == false:
			if attacking == false and jumpsquatting == false and landinglag <= 0 and dashing == false:
				if lpress == true and rpress == false:
					leftdash()
				elif lpress == false and rpress == true:
					rightdash()
				elif lpress == false and rpress == false:
					if dir == 1:
						rightdash()
					elif dir == - 1:
						leftdash()
		
		if velocity.x > 0.2:
			momentumdir = 1
		if velocity.x < - 0.2:
			momentumdir = - 1
		
		
		
		if attacknr == 0:
			$HITboxes / a_HITbox / box.set_deferred("disabled", true)
			$HITboxes / ca_HITbox / box.set_deferred("disabled", true)
			$HITboxes / caf_HITbox / box.set_deferred("disabled", true)
			$HITboxes / aa_HITbox / box.set_deferred("disabled", true)
			$HITboxes / daa_HITBOX / box.set_deferred("disabled", true)
			earial_invincibility = false
			projectile_invincibility = false
			full_invincibility = false
		if attacknr != 6:
			full_invincibility = false
			superarmor = 0
		if attacknr == 1:
			if attackframe >= 16 and attackframe <= 18:
				$HITboxes / a_HITbox / box.set_deferred("disabled", false)
			else:
				$HITboxes / a_HITbox / box.set_deferred("disabled", true)
			if attackframe <= 4 and (Input.is_action_just_pressed("up_p" + str(player)) and cpu == false):
				attackframe = 0
				upattack()
			if attackframe <= 11 and (Input.is_action_just_pressed("attack_p" + str(player)) and cpu == false) and peppermeter >= MAXMETER:
				attackframe = 0
				superattack()
			if attackframe == 14:
				$Sounds / WhiffSlow.play()
		if attacknr == 2:
			if attackframe == 9 or attackframe == 13 or attackframe == 18 or attackframe == 22:
				$HITboxes / ca_HITbox / box.set_deferred("disabled", false)
				$Sounds / WhiffFast.play()
			else:
				$HITboxes / ca_HITbox / box.set_deferred("disabled", true)
			if (Input.is_action_just_pressed("attack_p" + str(player)) and cpu == false) and ($Framebuffer.prevmotion == 1 and dir == 1) or (Input.is_action_just_pressed("attack_p" + str(player)) and cpu == false) and ($Framebuffer.prevmotion == 2 and dir == - 1):
				$HITboxes / ca_HITbox / box.set_deferred("disabled", true)
				attackframe = 0
				attack()
		if attacknr == 3:
			if attackframe == 10:
				Teardrop()
			if attackframe == 5:
				$Sounds / Bubble.play()
		if attacknr == 4:
			if attackframe == 15 and on_ground == false:
				$HITboxes / aa_HITbox / box.set_deferred("disabled", false)
				landinglag = 16
			if attackframe == 18:
				$HITboxes / aa_HITbox / box.set_deferred("disabled", true)
			if attackframe == 14:
				$Sounds / WhiffSlow.play()
		if attacknr == 5:
			if attackframe == 5:
				TeleportExplosion()
		if attacknr == 6:
			if attackframe >= 1 and attackframe <= 7:
				full_invincibility = true
			else:
				full_invincibility = false
			if attackframe == 1:
				SuperFlash()
				freezeframe(0.5)
				$Spritedetails / Blackbg.visible = true
				$Spritedetails / HitAnimation.play("superstartup" + str(tagcolor))
				peppermeter = 0
				$Sounds / Supercharge.play()
			if attackframe == 2:
				Blackhole()
		if attacknr == 7:
			if attackframe == 13:
				Dust1(dir)
			if attackframe == 13 or attackframe == 18 or attackframe == 22 or attackframe == 26 or attackframe == 31 or attackframe == 34:
				$HITboxes / caf_HITbox / box.set_deferred("disabled", false)
				velocity.x = 65 * dir
				$Sounds / WhiffMid.play()
			else:
				$HITboxes / caf_HITbox / box.set_deferred("disabled", true)
		if attacknr == 8:
			if attackframe == 6:
				superarmor = 200
				velocity.y = 320
				$Sounds / WhiffSlow.play()
				$HITboxes / daa_HITBOX / box.set_deferred("disabled", false)
			if on_ground == true:
				Landingarea()
				camerashake()
		
		
		
		if dashing == true or shieldstunned == true or hitstun != 0 or attacking == false:
			$HITboxes / a_Warncpu_PROJ / box.set_deferred("disabled", true)
		else:
			$HITboxes / a_Warncpu_PROJ / box.set_deferred("disabled", false)
		
		
		
		if hitstun > 0:
			hitstun -= 1
			resetsoftstates()
			if tumbling == false:
				if shocked == false:
					$AnimatedSprite.play("hitstun" + str(tagcolor))
				elif shocked == true:
					$AnimatedSprite.play("shocked" + str(tagcolor))
				$AnimatedSprite.rotation_degrees = 0
			elif tumbling == true:
				$AnimatedSprite.play("tumble" + str(tagcolor))
				$AnimatedSprite.rotation_degrees += 8 * dir + jugglecounter * 2 * dir
				$Spritedetails / Dustparticle.emitting = true
				$HURTboxes / HURTbox.scale.x = 0.7
		elif hitstun <= 0:
			tumbling = false
			shocked = false
			$AnimatedSprite.rotation_degrees = 0
			$Spritedetails / Dustparticle.emitting = false
			$HURTboxes / HURTbox.scale.x = 1
			if on_ground == true:
				jugglecounter = 0
				static_combo_damage_reduction = 0
				truejuggledamage = 0
				$UI / Flippable_UI / Combo_Healthpoints.value = hp
			if trainingmode == true and hp < MAXHP and on_ground == true:
				hp += 1
		
		
		
		if blockstun > 0:
			blockstun -= 1
			$AnimatedSprite.play("blockstun" + str(tagcolor))
		
		if shieldvis > 0 and blockstun <= 0:
			shieldvis -= 0.1
		$HITboxes / Shield.modulate = Color(1 + hitwhite * 0.2, 0.33 + hitwhite * 0.2, 0.33 + hitwhite * 0.2, shieldvis)
		
		if shieldstun >= MAXSTUN:
			shieldstunned = true
			shieldstun = MAXSTUN - 1
			shieldvis = 0
			Breakshield()
			resetstates()
		if shieldstun <= 0:
			shieldstunned = false
		if shieldstunned == true:
			$AnimatedSprite.play("shieldstunned" + str(tagcolor))
			if shieldstun < MAXSTUN - 1:
				$Spritedetails / Spinningstars.visible = true
				$UI / Flippable_UI / Stunpoints / Stunbar_Full.visible = false
		else:
			$Spritedetails / Spinningstars.visible = false
		if shieldstun < MAXSTUN - 1:
			$UI / Flippable_UI / Stunpoints / Stunbar_Full.visible = false
		
		
		
		$UI / Flippable_UI / Stunpoints.value = shieldstun
		if blocking == false and shieldstun > 0:
			if shieldstunremoveframes <= 0:
				shieldstunremoveframes = 8
				shieldstun -= 1
			else:
				shieldstunremoveframes -= 1
		$UI / Flippable_UI / Superpoints.value = peppermeter
		if peppermeter > MAXMETER:
			peppermeter = MAXMETER
		if peppermeter == MAXMETER:
			$UI / Flippable_UI / Superpoints / FullSuperbar.visible = true
			$UI / Repositionable_UI / DT / DoubleTap.visible = true
			$UI / Flippable_UI / Pepper.visible = true
		else:
			$UI / Flippable_UI / Superpoints / FullSuperbar.visible = false
			$UI / Repositionable_UI / DT / DoubleTap.visible = false
			$UI / Flippable_UI / Pepper.visible = false
		
		
		
		$Spritedetails / Shadow.global_position.y = 154
		$Spritedetails / Shadow.scale.x = 1 * (154 + position.y) / (154 * 2)
		$Spritedetails / Shadow.scale.y = 1 * (154 + 50 + position.y) / (154 * 2)



func attack():
	$AnimatedSprite.play("attack" + str(dir) + "_" + str(tagcolor))
	resetsoftstates()
	universal_attack_changes(1, 5)
	$Sounds / WhiffFast.play()

func crouchattack():
	$AnimatedSprite.play("crouchattack" + str(tagcolor))
	crouching = true
	fullcrouching = true
	universal_attack_changes(2, 4)

func upattack():
	attacking = false
	$AnimatedSprite.play("upattack" + str(tagcolor))
	resetsoftstates()
	universal_attack_changes(3, 0)
	$Sounds / WhiffFast.play()

func airattack():
	$AnimatedSprite.play("airattack" + str(dir) + "_" + str(tagcolor))
	universal_attack_changes(4, 5)
	$Sounds / WhiffFast.play()
	lastairattack = 1

func superattack():
	if hitstun == 0:
		$AnimatedSprite.play("superattack" + str(tagcolor))
		full_invincibility = true
		resetsoftstates()
		universal_attack_changes(6, 0)

func forwardcrouchattack():
	$AnimatedSprite.play("forwardcrouchattack" + str(tagcolor))
	crouching = true
	fullcrouching = true
	universal_attack_changes(7, 4)

func downairattack():
	$AnimatedSprite.play("airdownattack" + str(tagcolor))
	velocity.x = 0
	velocity.y = 0
	landinglag = 30
	universal_attack_changes(8, 8)
	$Sounds / Secretspecial.play()
	lastairattack = 2

func taunt():
	$AnimatedSprite.play("taunt" + str(tagcolor))
	resetsoftstates()
	universal_attack_changes(21, 0)

func universal_attack_changes(nmbr, ppr):
	if on_ground == true:
		attacking = true
	else:
		airattacking = true
	attacknr = nmbr
	peppermeter += ppr
	parryframes = 0
	shieldvis = 0
	blocking = false
	jumpsquatting = false
	jumpsquatframes = 0
	attackframebuffer = 0



func jump():
	$Framebuffer.djbuffer = 0
	position.y -= 4
	jumpsquatting = false
	jumpsquatframes = 0
	on_ground = false
	blocking = false
	if dashing == false:
		velocity.y = JUMP_POWER
	else:
		velocity.y = JUMP_POWER * 0.8
	if lpress == true and rpress == false:
		if dashing == false:
			velocity.x = - SPEED
		else:
			velocity.x = - SPEED * 1.5
	elif lpress == false and rpress == true:
		if dashing == false:
			velocity.x = SPEED
		else:
			velocity.x = SPEED * 1.5
	else:
		if dashing == false:
			velocity.x = 0
		else:
			velocity.x = SPEED * 1.5 * momentumdir
	landinglag = 2
	shieldvis = 0
	$Sounds / Jump.play()
	Dust2(dir, 4)

func rightdash():
	$AnimatedSprite.play("dash" + str(tagcolor))
	dashing = true
	if on_ground == true:
		velocity.x = DASHSPEED
	rpressfordash = 0
	parryframes = 0
	$HURTboxes / HURTbox / CollisionShape2D.set_deferred("disabled", true)
	$Otherplayer_OWcollisions / OWcollisioncontainter / OWC_left.set_deferred("disabled", true)
	$Otherplayer_OWcollisions / OWcollisioncontainter / OWC_right.set_deferred("disabled", true)
	$Timers / invinctimer.start()
	$Sounds / Teleport.play()
	Dust1(1)
	TPFlash()

func leftdash():
	$AnimatedSprite.play("dash" + str(tagcolor))
	dashing = true
	if on_ground == true:
		velocity.x = - DASHSPEED
	lpressfordash = 0
	parryframes = 0
	$HURTboxes / HURTbox / CollisionShape2D.set_deferred("disabled", true)
	$Timers / invinctimer.start()
	$Sounds / Teleport.play()
	Dust1( - 1)
	TPFlash()



func Hit(velx, vely, h_stun, h_white, dmg, tumbl, peppr, jugg, frz, minimumdmg):
	if alive == true and full_invincibility == false:
		if superarmor >= 1:
			superarmor -= dmg
		if superarmor <= 0:
			velocity.x = velx
			velocity.y = vely
			hitstun = h_stun
			hitwhite = h_white
		if dmg != 0:
			if dmg - static_combo_damage_reduction > minimumdmg:
				hp -= (dmg - static_combo_damage_reduction)
				truejuggledamage += (dmg - static_combo_damage_reduction)
				if floor((dmg - static_combo_damage_reduction) / 4) >= 1:
					static_combo_damage_reduction += floor((dmg - static_combo_damage_reduction) / 4)
				else:
					static_combo_damage_reduction += 1
			else:
				hp -= minimumdmg
				truejuggledamage += minimumdmg
				
		
		tumbling = tumbl
		peppermeter += peppr
		jugglecounter += jugg
		blockstun = 0
		shieldvis = 0
		if shieldstunned == true:
			shieldstunned = false
			shieldstun = 0
		if velx != 0:
			shocked = false
		parryframes = 0
		resetstates()
		displaySelfLower()
		if hp <= 0:
			freezeframe(1)
		else:
			if frz > 0:
				freezeframe(frz)



func Block(velx, b_stun, h_white, dmg, frz, shst):
	velocity.x = velx
	blockstun = b_stun
	if dmg >= 1:
		BlockvisBig(0)
	else:
		BlockvisMid(0)
	hitwhite = h_white
	if hp > dmg:
		hp -= dmg
	else:
		hp = 1
	shieldstun += shst
	jumpsquatting = false
	jumpsquatframes = 0
	dashing = false
	hitstun = 0
	shieldvis = 1
	parryframes = 0
	if shieldstun < MAXSTUN:
		freezeframe(frz)
	$UI / Repositionable_UI / Debug_Ui / Var2.set_text("var 2 =" + str(shst))

func Perfectblock(frz):
	var pp = PARRYPARTICLE.instance()
	get_parent().add_child(pp)
	pp.position = position
	peppermeter += 5
	doingparry = true
	jumpsquatting = false
	jumpsquatframes = 0
	dashing = false
	hitstun = 0
	freezeframe(frz)
	framesuntilnextparry = 0
	$Sounds / Parry.play()
	cpu_randomness = randi() % 8 + 1

func Proj_Perfectblock():
	var pp = PARRYPARTICLE.instance()
	get_parent().add_child(pp)
	pp.position = position
	$AnimatedSprite.play("proj_parry")
	universal_attack_changes(99, 0)
	peppermeter += 5
	doingparry = true
	jumpsquatting = false
	jumpsquatframes = 0
	dashing = false
	hitstun = 0
	framesuntilnextparry = 0
	$Sounds / Parry.play()
	cpu_randomness = randi() % 8 + 1

func Breakshield():
	shieldvis = 0
	hitwhite = 20
	var sbp = SHIELDBREAKPARTICLES.instance()
	get_parent().add_child(sbp)
	sbp.position = position
	var sc = SHIELDCRACK.instance()
	get_parent().add_child(sc)
	sc.position = position
	$UI / Flippable_UI / Stunpoints / Stunbar_Full.visible = true
	$Spritedetails / Blackbg.visible = true
	freezeframe(0.5)
	$Sounds / Shieldbreak.play()

func KOVis():
	var kv = KOVIS.instance()
	get_parent().add_child(kv)
	kv.position = position

func camerashake():
	get_node("../fgc_camera").shake()



func TeleportExplosion():
	var tpx = TP_EXPL.instance()
	get_parent().add_child(tpx)
	tpx.position.x = position.x
	tpx.position.y = position.y
	tpx.dir = dir
	tpx.player = player
	$Sounds / Scorch.play()

func Blackhole():
	var bh = BLACKHOLE.instance()
	get_parent().add_child(bh)
	bh.position.x = position.x + 100 * dir
	bh.position.y = 130
	bh.player = player

func Teardrop():
	var td = TEAR.instance()
	get_parent().add_child(td)
	td.position.x = position.x + 10 * dir
	td.position.y = position.y - 24
	td.velocity.y = - 140
	td.dir = dir
	td.player = player

func TPFlash():
	var tpf = FLASH.instance()
	get_parent().add_child(tpf)
	tpf.position.x = position.x
	tpf.position.y = position.y
	tpf.dir = dir
	tpf.tagcolor = tagcolor

func Landingarea():
	var la = LANDINGAREA.instance()
	get_parent().add_child(la)
	la.position.x = position.x
	la.position.y = position.y + 17
	la.player = player
	la.dir = dir
	$Sounds / Landstomp.play()

func DJvisual():
	var dj = DJVIS.instance()
	get_parent().add_child(dj)
	dj.position.x = position.x
	dj.position.y = position.y + 6

func Hitvisual_Small():
	var hv = HITVIS_SMALL.instance()
	get_parent().add_child(hv)
	hv.position.x = (position.x + o_xloc) / 2
	hv.position.y = (position.y + o_yloc) / 2

func Hitvisual_Mid():
	var hv = HITVIS_MID.instance()
	get_parent().add_child(hv)
	hv.position.x = o_xloc
	hv.position.y = o_yloc

func Bitevisual():
	var bv = BITEVIS.instance()
	get_parent().add_child(bv)
	bv.position.x = (position.x + o_xloc) / 2
	bv.position.y = (position.y + o_yloc) / 2

func WallVisual():
	var sdw = SDWALL_PARTICLE.instance()
	get_parent().add_child(sdw)
	sdw.position = position

func BlockvisMid(plusy):
	var bv = BLOCKVISUAL_MID.instance()
	get_parent().add_child(bv)
	bv.position.x = position.x + 12 * dir
	bv.position.y = (position.y + o_yloc) / 2 + plusy
	bv.scale.x = - dir

func BlockvisBig(plusy):
	var bv = BLOCKVISUAL_BIG.instance()
	get_parent().add_child(bv)
	bv.position.x = position.x + 12 * dir
	bv.position.y = (position.y + o_yloc) / 2 + plusy
	bv.scale.x = - dir

func Dust1(d):
	var dust = DUST1.instance()
	get_parent().add_child(dust)
	dust.position = position
	dust.dir = d

func Dust2(d, plusdist):
	var dust = DUST2.instance()
	get_parent().add_child(dust)
	dust.position.x = position.x
	dust.position.y = position.y + plusdist
	dust.dir = d

func FireSpawn(d):
	var fs = FIRESPAWN.instance()
	get_parent().add_child(fs)
	fs.position.x = position.x + 10 * dir
	fs.position.y = position.y
	fs.dir = d

func displaySelfHigher():
	z_index = 2

func displaySelfLower():
	z_index = 1

func SuperFlash():
	var sf = SUPERFLASH.instance()
	get_parent().add_child(sf)
	sf.position = position

func Floating_Body():
	var fb = FLOATBODY.instance()
	get_parent().add_child(fb)
	fb.position = position
	fb.body_id = character_id
	fb.color_id = tagcolor



func freezeframe(duration):
	yield(get_tree().create_timer(0.016), "timeout")
	get_tree().paused = true
	$Spritedetails / HitAnimation.visible = true
	$AnimatedSprite.visible = false
	yield(get_tree().create_timer(duration), "timeout")
	get_tree().paused = false
	$Spritedetails / HitAnimation.visible = false
	$AnimatedSprite.visible = true



func add_ai_child():
	var ai_child = AI_CHILD.instance()
	add_child(ai_child)
	ai_child.StatChange_TM()



func resetstates():
	attacking = false
	airattacking = false
	jumpsquatting = false
	jumpsquatframes = 0
	crouching = false
	fullcrouching = false
	dashing = false
	landinglag = 0
	attackframebuffer = 0
	attackframe = 0
	attacknr = 0
	$Otherplayer_OWcollisions / OWcollisioncontainter / OWC_left.set_deferred("disabled", false)
	$Otherplayer_OWcollisions / OWcollisioncontainter / OWC_right.set_deferred("disabled", false)

func resetsoftstates():
	crouching = false
	fullcrouching = false
	jumpsquatting = false
	jumpsquatframes = 0
	attackframebuffer = 0

func resetmatch():
	if player == 1:
		position.x = 80
		dir = 1
	elif player == 2:
		position.x = 240
		dir = - 1
	position.y = 139
	$AnimatedSprite.rotation_degrees = 0
	$Spritedetails / Shadow.global_position.y = 154
	resetstates()
	alive = true
	hp = MAXHP
	hitstun = 0
	velocity.x = 0
	velocity.y = 0
	hitstun = 0
	hitwhite = 0
	tumbling = false
	jugglecounter = 0
	blockstun = 0
	shieldstun = 0
	shieldvis = 0
	parryframes = 0
	aware_of_projectiles = 0
	$AnimatedSprite.visible = true
	$Spritedetails.visible = true
	if GlobalSettings.global_cinematicmode == false:
		$Tag.visible = true
	introframes = 120



func _on_AnimatedSprite_animation_finished():
	if $AnimatedSprite.animation == "crouch1" or $AnimatedSprite.animation == "crouch2" or $AnimatedSprite.animation == "crouch3" or $AnimatedSprite.animation == "crouch4":
		fullcrouching = true
	$Otherplayer_OWcollisions / OWcollisioncontainter / OWC_left.set_deferred("disabled", false)
	$Otherplayer_OWcollisions / OWcollisioncontainter / OWC_right.set_deferred("disabled", false)
	dashing = false
	attacking = false
	airattacking = false

func r_cpu_r_t():
	$Timers / cpu_randomness_timer.start()

func _on_cpu_randomness_timer_timeout():
	$Timers / cpu_randomness_timer.start()
	if cpu_level == 1:
		cpu_randomness = randi() % 16 + 1
	elif cpu_level == 2:
		cpu_randomness = randi() % 8 + 1

func _on_Projectile_Awareness_area_entered(area):
	if "PROJ" in area.get_parent().name or "PROJ" in area.name:
		if area != $HURTboxes / Projectile_Awareness:
			aware_of_projectiles += 1

func _on_Projectile_Awareness_area_exited(area):
	if "PROJ" in area.get_parent().name or "PROJ" in area.name:
		if area != $HURTboxes / Projectile_Awareness and aware_of_projectiles > 0:
			aware_of_projectiles -= 1

func _on_HURTbox_area_entered(_area):
	if cpu == true:
		r_cpu_r_t()

func _on_invinctimer_timeout():
	$HURTboxes / HURTbox / CollisionShape2D.set_deferred("disabled", false)



func _on_a_HITbox_area_entered(area):
	if "HURT" in area.name and area != $HURTboxes / HURTbox and area.get_parent().get_parent().earial_invincibility == false:
		displaySelfHigher()
		if area.get_parent().get_parent().parrying == false:
			if area.get_parent().get_parent().blocking == false:
				if area.get_parent().get_parent().on_ground == true:
					area.get_parent().get_parent().Hit(180 * dir, 0, 16, 6, 14, false, 5, 0, 0.18, 4)
				else:
					area.get_parent().get_parent().Hit(130 * dir, - 120, 16, 6, 14, true, 5, 0, 0.18, 4)
				Hitvisual_Mid()
				$Sounds / HitMid.play()
			elif area.get_parent().get_parent().blocking == true:
				area.get_parent().get_parent().Block(250 * dir, 4, 4, 0, 0.17, 10)
				$Sounds / BlockMid.play()
		else:
			area.get_parent().get_parent().Perfectblock(0.25)

func _on_ca_HITbox_area_entered(area):
	if "HURT" in area.name and area != $HURTboxes / HURTbox:
		displaySelfHigher()
		if area.get_parent().get_parent().parrying == false:
			if area.get_parent().get_parent().blocking == false:
				if attackframe >= 21:
					area.get_parent().get_parent().Hit(120 * dir, - 230 + area.get_parent().get_parent().jugglecounter * 55, 35 - area.get_parent().get_parent().jugglecounter * 4, 5, 2, true, 1, 1, 0.2, 2)
					velocity.x = - 150 * dir
				else:
					area.get_parent().get_parent().Hit(0 * dir, 0, 20, 6, 2, false, 2, 0, 0.08, 2)
					
				Hitvisual_Small()
				$Sounds / HitFast.play()
			elif area.get_parent().get_parent().blocking == true:
				if attackframe >= 21:
					area.get_parent().get_parent().Block(80 * dir, 11, 5, 0, 0.15, 3)
				else:
					area.get_parent().get_parent().Block(80 * dir, 2, 2, 0, 0.05, 3)
				velocity.x = - 60 * dir
				$Sounds / BlockFast.play()
		else:
			area.get_parent().get_parent().Perfectblock(0.25)

func _on_caf_HITbox_area_entered(area):
	if "HURT" in area.name and area != $HURTboxes / HURTbox:
		displaySelfHigher()
		if area.get_parent().get_parent().parrying == false:
			if area.get_parent().get_parent().blocking == false:
				if attackframe >= 33:
					area.get_parent().get_parent().Hit(250 * dir, - 170 + area.get_parent().get_parent().jugglecounter * 40, 16 - area.get_parent().get_parent().jugglecounter * 2, 5, 2, true, 1, 2, 0.12, 2)
				else:
					area.get_parent().get_parent().Hit(45 * dir, 0, 20, 6, 2, false, 2, 0, 0.08, 2)
				Hitvisual_Small()
				$Sounds / HitFast.play()
			elif area.get_parent().get_parent().blocking == true:
				if attackframe >= 33:
					area.get_parent().get_parent().Block(85 * dir, 2, 5, 0, 0.15, 3)
				else:
					area.get_parent().get_parent().Block(85 * dir, 2, 2, 0, 0.05, 3)
				$Sounds / BlockMid.play()
		else:
			area.get_parent().get_parent().Perfectblock(0.25)

func _on_aa_HITbox_area_entered(area):
	if "HURT" in area.name and area != $HURTboxes / HURTbox and area.get_parent().get_parent().earial_invincibility == false:
		displaySelfHigher()
		if area.get_parent().get_parent().parrying == false:
			if area.get_parent().get_parent().blocking == false:
				area.get_parent().get_parent().Hit(100 * dir, 0, 38, 6, 10, false, 5, 0, 0.18, 4)
				Hitvisual_Mid()
				$Sounds / HitMid.play()
			elif area.get_parent().get_parent().blocking == true:
				area.get_parent().get_parent().Block(70 * dir, 14, 4, 0, 0.17, 7)
				$Sounds / BlockMid.play()
		else:
			area.get_parent().get_parent().Perfectblock(0.25)
		candoublejump = 2
		$HITboxes / aa_HITbox / box.set_deferred("disabled", true)

func _on_daa_HITBOX_area_entered(area):
	if "HURT" in area.name and area != $HURTboxes / HURTbox and area.get_parent().get_parent().earial_invincibility == false:
		displaySelfHigher()
		if area.get_parent().get_parent().parrying == false:
			if area.get_parent().get_parent().blocking == false:
				area.get_parent().get_parent().Hit(20 * - dir, 400, 10, 6, 1, false, 5, 0, 0.1, 2)
				Hitvisual_Mid()
				$Sounds / HitMid.play()
			elif area.get_parent().get_parent().blocking == true:
				area.get_parent().get_parent().Block(20 * - dir, 1, 6, 0, 0.1, 10)
				$Sounds / BlockMid.play()
		else:
			area.get_parent().get_parent().Perfectblock(0.25)

func _on_Set_Ready_Variables_Timer_timeout():
	setreadyvariables()
